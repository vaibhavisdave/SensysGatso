package com.gatso.traffic.events.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

import java.util.List;
import java.util.Random;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.gatso.traffic.events.data.Violation;
import com.gatso.traffic.events.data.setup.TrafficEventDataSetup;

/**
 *class to test ViolationController.
 *
 * @author vighn
 *
 */
@SpringBootTest(classes = {com.gatso.traffic.events.EventsApplication.class})
@AutoConfigureMockMvc
public class ViolationControllerTest {

  @Autowired
  MockMvc mvc;
  

  @Autowired
  private ObjectMapper objectMapper;
  
  @Test
  void testGetFines() throws JsonProcessingException, Exception {
    when(TrafficEventDataSetup.getVoilations()).thenReturn(getEvents());
    mvc.perform(get("/fines")
        .contentType(MediaType.APPLICATION_JSON))
        .andExpect(result -> {
          assertEquals(result.getResponse().getStatus(), 200);
          List<Violation> list = List.of(objectMapper.readValue(
                                         result.getResponse().getContentAsString(),
                                         Violation.class));
          assertEquals(list.size(), 2);
        });
  }
  
  @Test
  void testGetSize() throws JsonProcessingException, Exception {
    when(TrafficEventDataSetup.getVoilations()).thenReturn(getEvents());
    mvc.perform(get("/fines/size")
        .contentType(MediaType.APPLICATION_JSON))
        .andExpect(result -> {
          assertEquals(result.getResponse().getStatus(), 200);
          List<Violation> list = List.of(objectMapper.readValue(
                                         result.getResponse().getContentAsString(),
                                         Violation.class));
          assertEquals(list.size(), 2);
        });
  }
  
  @Test
  void testGetSpeed() throws JsonProcessingException, Exception {
    when(TrafficEventDataSetup.getVoilations()).thenReturn(getEvents());
    mvc.perform(get("/fines/speed")
        .contentType(MediaType.APPLICATION_JSON))
        .andExpect(result -> {
          assertEquals(result.getResponse().getStatus(), 200);
          List<Violation> list = List.of(objectMapper.readValue(
                                         result.getResponse().getContentAsString(),
                                         Violation.class));
          assertEquals(list.size(), 1);
        });
  }
  
  @Test
  void testGetRedLight() throws JsonProcessingException, Exception {
    when(TrafficEventDataSetup.getVoilations()).thenReturn(getEvents());
    mvc.perform(get("/fines/redLight")
        .contentType(MediaType.APPLICATION_JSON))
        .andExpect(result -> {
          assertEquals(result.getResponse().getStatus(), 200);
          List<Violation> list = List.of(objectMapper.readValue(
                                         result.getResponse().getContentAsString(),
                                         Violation.class));
          assertEquals(list.size(), 1);
        });
  }
  
  @Test
  void testGetSpeedPending() throws JsonProcessingException, Exception {
    Mockito.mockStatic(TrafficEventDataSetup.class)
    .when(TrafficEventDataSetup::getVoilations)
    .thenReturn(getEvents());
    
    mvc.perform(get("/fines/speedPending")
        .contentType(MediaType.APPLICATION_JSON))
        .andExpect(result -> {
          assertEquals(result.getResponse().getStatus(), 200);
          long fine = Long.valueOf(result.getResponse().getContentAsString());
          assertEquals(fine, 50);
        });
  }
  
  
  @Test
  void testGetRedLightPending() throws JsonProcessingException, Exception {
    when(TrafficEventDataSetup.getVoilations()).thenReturn(getEvents());
    mvc.perform(get("/fines/redLightPending")
        .contentType(MediaType.APPLICATION_JSON))
        .andExpect(result -> {
          assertEquals(result.getResponse().getStatus(), 200);
          long fine = Long.valueOf(result.getResponse().getContentAsString());
          assertEquals(fine, 100);
        });
  }

  private List<Violation> getEvents() {

    return List.of(
        new Violation(new Random().nextLong(1, 10000), 
                      new Random().nextLong(1, 10000), 100, true, "RED_LIGHT"),
        new Violation(new Random().nextLong(1, 10000),
                      new Random().nextLong(1, 10000), 50, true, "SPEED"));
  }
}
